<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EAAddinFramework</name>
    </assembly>
    <members>
        <member name="T:EAAddinFramework.EAAddinBase">
            <summary>
            This abstract class can be used as a base class for creating add-ins for Enterprise Architec
            It contains all supported operations for EA v 8.0.864
            </summary>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.IsProjectOpen(EA.Repository)">
            <summary>
            returns true if a project is currently opened
            </summary>
            <param name="Repository">the repository</param>
            <returns>true if a project is opened in EA</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_Connect(EA.Repository)">
            <summary>
            EA_Connect events enable Add-Ins to identify their type and to respond to Enterprise Architect start up.
            This event occurs when Enterprise Architect first loads your Add-In. Enterprise Architect itself is loading at this time so that while a Repository object is supplied, there is limited information that you can extract from it.
            The chief uses for EA_Connect are in initializing global Add-In data and for identifying the Add-In as an MDG Add-In.
            Also look at EA_Disconnect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <returns>String identifying a specialized type of Add-In: 
            - "MDG" : MDG Add-Ins receive MDG Events and extra menu options.
            - "" : None-specialized Add-In.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_GetMenuItems(EA.Repository,System.String,System.String)">
            <summary>
            The EA_GetMenuItems event enables the Add-In to provide the Enterprise Architect user interface with additional Add-In menu options in various context and main menus. When a user selects an Add-In menu option, an event is raised and passed back to the Add-In that originally defined that menu option.
            This event is raised just before Enterprise Architect has to show particular menu options to the user, and its use is described in the Define Menu Items topic.
            Also look at:
            - EA_MenuClick
            - EA_GetMenuState.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="MenuLocation">String representing the part of the user interface that brought up the menu. 
            Can be TreeView, MainMenu or Diagram.</param>
            <param name="MenuName">The name of the parent menu for which sub-items are to be defined. In the case of the top-level menu it is an empty string.</param>
            <returns>One of the following types:
            - A string indicating the label for a single menu option.
            - An array of strings indicating a multiple menu options.
            - Empty (Visual Basic/VB.NET) or null (C#) to indicate that no menu should be displayed.
            In the case of the top-level menu it should be a single string or an array containing only one item, or Empty/null.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_GetMenuState(EA.Repository,System.String,System.String,System.String,System.Boolean@,System.Boolean@)">
            <summary>
            The EA_GetMenuState event enables the Add-In to set a particular menu option to either enabled or disabled. This is useful when dealing with locked packages and other situations where it is convenient to show a menu option, but not enable it for use.
            This event is raised just before Enterprise Architect has to show particular menu options to the user. Its use is described in the Define Menu Items topic.
            Also look at EA_GetMenuItems.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="MenuLocation">String representing the part of the user interface that brought up the menu. 
            Can be TreeView, MainMenu or Diagram.</param>
            <param name="MenuName">The name of the parent menu for which sub-items must be defined. In the case of the top-level menu it is an empty string.</param>
            <param name="ItemName">The name of the option actually clicked, for example, Create a New Invoice.</param>
            <param name="IsEnabled">Boolean. Set to False to disable this particular menu option.</param>
            <param name="IsChecked">Boolean. Set to True to check this particular menu option.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_MenuClick(EA.Repository,System.String,System.String,System.String)">
            <summary>
            EA_MenuClick events are received by an Add-In in response to user selection of a menu option.
            The event is raised when the user clicks on a particular menu option. When a user clicks on one of your non-parent menu options, your Add-In receives a MenuClick event, defined as follows:
            Sub EA_MenuClick(Repository As EA.Repository, ByVal MenuName As String, ByVal ItemName As String)
            Notice that your code can directly access Enterprise Architect data and UI elements using Repository methods.
            Also look at EA_GetMenuItems.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="MenuLocation">String representing the part of the user interface that brought up the menu. 
            Can be TreeView, MainMenu or Diagram.</param>
            <param name="MenuName">The name of the parent menu for which sub-items must be defined. In the case of the top-level menu it is an empty string.</param>
            <param name="ItemName">The name of the option actually clicked, for example, Create a New Invoice.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_Disconnect">
            <summary>
            The EA_Disconnect event enables the Add-In to respond to user requests to disconnect the model branch from an external project.
            This function is called when the Enterprise Architect closes. If you have stored references to Enterprise Architect objects (not particularly recommended anyway), you must release them here.
            In addition, .NET users must call memory management functions as shown below:
            GC.Collect();
            GC.WaitForPendingFinalizers();
            Also look at EA_Connect.
            </summary>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnOutputItemClicked(EA.Repository,System.String,System.String,System.Int64)">
            <summary>
            EA_OnOutputItemClicked events inform Add-Ins that the user has clicked on a list entry in the system tab or one of the user defined output tabs.
            Usually an Add-In responds to this event in order to capture activity on an output tab they had previously created through a call to Repository.AddTab().
            Note that every loaded Add-In receives this event for every click on an output tab in Enterprise Architect - irrespective of whether the Add-In created that tab. Add-Ins should therefore check the TabName parameter supplied by this event to ensure that they are not responding to other Add-Ins' events.
            Also look at EA_OnOutputItemDoubleClicked.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="TabName">The name of the tab that the click occurred in. 
            Usually this would have been created through Repository.AddTab().</param>
            <param name="LineText">The text that had been supplied as the String parameter in the original call to Repository.WriteOutput().</param>
            <param name="ID">The ID value specified in the original call to Repository.WriteOutput().</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnOutputItemDoubleClicked(EA.Repository,System.String,System.String,System.Int64)">
            <summary>
            EA_OnOutputItemDoubleClicked events informs Add-Ins that the user has used the mouse to double-click on a list entry in one of the user-defined output tabs.
            Usually an Add-In responds to this event in order to capture activity on an output tab they had previously created through a call to Repository.AddTab().
            Note that every loaded Add-In receives this event for every double-click on an output tab in Enterprise Architect - irrespective of whether the Add-In created that tab. Add-Ins should therefore check the TabName parameter supplied by this event to ensure that they are not responding to other Add-Ins' events.
            Also look at EA_OnOutputItemClicked.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="TabName">The name of the tab that the click occurred in. 
            Usually this would have been created through Repository.AddTab().</param>
            <param name="LineText">The text that had been supplied as the String parameter in the original call to Repository.WriteOutput().</param>
            <param name="ID">The ID value specified in the original call to Repository.WriteOutput().</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_ShowHelp(EA.Repository,System.String,System.String,System.String)">
            <summary>
            The EA_ShowHelp event enables the Add-In to show a help topic for a particular menu option. When the user has an Add-In menu option selected, pressing [F1] can be delegated to the required Help topic by the Add-In and a suitable help message shown.
            This event is raised when the user presses [F1] on a menu option that is not a parent menu.
            Also look at EA_GetMenuItems.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="MenuLocation">String representing the part of the user interface that brought up the menu. 
            Can be Treeview, MainMenu or Diagram.</param>
            <param name="MenuName">The name of the parent menu for which sub-items are to be defined. In the case of the top-level menu it is an empty string.</param>
            <param name="ItemName">The name of the option actually clicked, for example, Create a New Invoice.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_FileOpen(EA.Repository)">
            <summary>
            The EA_FileOpen event enables the Add-In to respond to a File Open event. When Enterprise Architect opens a new model file, this event is raised and passed to all Add-Ins implementing this method.
            The event occurs when the model being viewed by the Enterprise Architect user changes, for whatever reason (through user interaction or Add-In activity).
            Also look at EA_FileClose and EA_FileNew.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_FileClose(EA.Repository)">
            <summary>
            The EA_FileClose event enables the Add-In to respond to a File Close event. When Enterprise Architect closes an opened Model file, this event is raised and passed to all Add-Ins implementing this method.
            This event occurs when the model currently opened within Enterprise Architect is about to be closed (when another model is about to be opened or when Enterprise Architect is about to shutdown).
            Also look at EA_FileOpen and EA_FileNew.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_FileNew(EA.Repository)">
            <summary>
            The EA_FileNew event enables the Add-In to respond to a File New event. When Enterprise Architect creates a new model file, this event is raised and passed to all Add-Ins implementing this method.
            The event occurs when the model being viewed by the Enterprise Architect user changes, for whatever reason (through user interaction or Add-In activity).
            Also look at EA_FileClose and EA_FileOpen.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostCloseDiagram(EA.Repository,System.Int32)">
            <summary>
            EA_OnPostCloseDiagram notifies Add-Ins that a diagram has been closed.
            Also look at EA_OnPostOpenDiagram.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="DiagramID">Contains the Diagram ID of the diagram that was closed.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostOpenDiagram(EA.Repository,System.Int32)">
            <summary>
            EA_OnPostOpenDiagram notifies Add-Ins that a diagram has been opened.
            Also look at EA_OnPostCloseDiagram.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="DiagramID">Contains the Diagram ID of the diagram that was opened.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreDeleteElement(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreDeleteElement notifies Add-Ins that an element is to be deleted from the model. It enables Add-Ins to permit or deny deletion of the element.
            This event occurs when a user deletes an element from the Project Browser or on a diagram. 
            The notification is provided immediately before the element is deleted, so that the Add-In can disable deletion of the element.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the element to be deleted:
            - ElementID: A long value corresponding to Element.ElementID.</param>	
            <returns>Return True to enable deletion of the element from the model. Return False to disable deletion of the element.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreDeleteAttribute(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreDeleteAttribute notifies Add-Ins that an attribute is to be deleted from the model. It enables Add-Ins to permit or deny deletion of the attribute.
            This event occurs when a user deletes an attribute from the Project Browser or on a diagram. 
            The notification is provided immediately before the attribute is deleted, so that the Add-In can disable deletion of the attribute.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the Attribute to be deleted:
            - AttributeID: A long value corresponding to Attribute.AttributeID.</param>	
            <returns>Return True to enable deletion of the attribute from the model. Return False to disable deletion of the attribute.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreDeleteMethod(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreDeleteMethod notifies Add-Ins that an method is to be deleted from the model. It enables Add-Ins to permit or deny deletion of the method.
            This event occurs when a user deletes an method from the Project Browser or on a diagram. 
            The notification is provided immediately before the method is deleted, so that the Add-In can disable deletion of the method.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the Method to be deleted:
            - MethodID: A long value corresponding to Method.MethodID.</param>	
            <returns>Return True to enable deletion of the method from the model. Return False to disable deletion of the method.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreDeleteConnector(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreDeleteConnector notifies Add-Ins that an connector is to be deleted from the model. It enables Add-Ins to permit or deny deletion of the connector.
            This event occurs when a user attempts to permanently delete a connector on a diagram.
            The notification is provided immediately before the connector is deleted, so that the Add-In can disable deletion of the connector.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the connector to be deleted:
            - ConnectorID: A long value corresponding to Connector.ConnectorID.</param>	
            <returns>Return True to enable deletion of the connector from the model. Return False to disable deletion of the connector.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreDeleteDiagram(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreDeleteDiagram notifies Add-Ins that an diagram is to be deleted from the model. It enables Add-Ins to permit or deny deletion of the diagram.
            This event occurs when a user attempts to permanently delete a diagram from the Project Browser.
            The notification is provided immediately before the diagram is deleted, so that the Add-In can disable deletion of the diagram.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the diagram to be deleted:
            - DiagramID: A long value corresponding to Diagram.DiagramID.</param>	
            <returns>Return True to enable deletion of the diagram from the model. Return False to disable deletion of the diagram.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreDeletePackage(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreDeletePackage notifies Add-Ins that an package is to be deleted from the model. It enables Add-Ins to permit or deny deletion of the package.
            This event occurs when a user attempts to permanently delete a package from the Project Browser.
            The notification is provided immediately before the package is deleted, so that the Add-In can disable deletion of the package.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the package to be deleted:
            - PackageID: A long value corresponding to Package.PackageID.</param>	
            <returns>Return True to enable deletion of the package from the model. Return False to disable deletion of the package.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreDeleteGlossaryTerm(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreDeleteGlossaryTerm notifies Add-Ins that a glossary term is to be deleted from the model. It enables Add-Ins to permit or deny deletion of the glossary term.
            The notification is provided immediately before the glossary term is deleted, so that the Add-In can disable deletion of the glossary term.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the glossary term to be deleted:
            TermID: A long value corresponding to Term.TermID.</param>
            <returns>Return True to enable deletion of the glossary term from the model. Return False to disable deletion of the glossary term.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreNewElement(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreNewElement notifies Add-Ins that a new element is about to be created on a diagram. It enables Add-Ins to permit or deny creation of the new element.
            This event occurs when a user drags a new element from the Toolbox or Resources window onto a diagram. 
            The notification is provided immediately before the element is created, so that the Add-In can disable addition of the element.
            Also look at EA_OnPostNewElement.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the element to be created:
            - Type: A string value corresponding to Element.Type
            - Stereotype: A string value corresponding to Element.Stereotype
            - ParentID: A long value corresponding to Element.ParentID
            - DiagramID: A long value corresponding to the ID of the diagram to which the element is being added. </param>
            <returns>Return True to enable addition of the new element to the model. Return False to disable addition of the new element.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreNewConnector(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreNewConnector notifies Add-Ins that a new connector is about to be created on a diagram. It enables Add-Ins to permit or deny creation of a new connector.
            This event occurs when a user drags a new connector from the Toolbox or Resources window, onto a diagram. The notification is provided immediately before the connector is created, so that the Add-In can disable addition of the connector.
            Also look at EA_OnPostNewConnector.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the connector to be created:
            - Type: A string value corresponding to Connector.Type
            - Subtype: A string value corresponding to Connector.Subtype
            - Stereotype: A string value corresponding to Connector.Stereotype
            - ClientID: A long value corresponding to Connector.ClientID
            - SupplierID: A long value corresponding to Connector.SupplierID
            - DiagramID: A long value corresponding to Connector.DiagramID.
            </param>
            <returns>Return True to enable addition of the new connector to the model. Return False to disable addition of the new connector.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreNewDiagram(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreNewDiagram notifies Add-Ins that a new diagram is about to be created. It enables Add-Ins to permit or deny creation of the new diagram.
            The notification is provided immediately before the diagram is created, so that the Add-In can disable addition of the diagram.
            Also look at EA_OnPostNewDiagram.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the diagram to be created:
            - Type: A string value corresponding to Diagram.Type
            - ParentID: A long value corresponding to Diagram.ParentID
            - PackageID: A long value corresponding to Diagram.PackageID. </param>
            <returns>Return True to enable addition of the new diagram to the model. Return False to disable addition of the new diagram.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreNewDiagramObject(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreNewDiagramObject notifies Add-Ins that a new diagram object is about to be dropped on a diagram. It enables Add-Ins to permit or deny creation of the new object.
            This event occurs when a user drags an object from the Enterprise Architect Project Browser or Resources window onto a diagram. The notification is provided immediately before the object is created, so that the Add-In can disable addition of the object.
            Also look at EA_OnPostNewDiagramObject.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the object to be created:
            - Type: A string value corresponding to Object.Type
            - Stereotype: A string value corresponding to Object.Stereotype
            - ParentID: A long value corresponding to Object.ParentID
            - DiagramID: A long value corresponding to the ID of the diagram to which the object is being added. </param>
            <returns>Return True to enable addition of the object to the model. Return False to disable addition of the object.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreNewAttribute(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreNewAttribute notifies Add-Ins that a new attribute is about to be created on an element. It enables Add-Ins to permit or deny creation of the new attribute.
            This event occurs when a user creates a new attribute on an element by either drag-dropping from the Project Browser, using the Attributes Properties dialog, or using the in-place editor on the diagram. The notification is provided immediately before the attribute is created, so that the Add-In can disable addition of the attribute.
            Also look at EA_OnPostNewAttribute.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the attribute to be created:
            - Type: A string value corresponding to Attribute.Type
            - Stereotype: A string value corresponding to Attribute.Stereotype
            - ParentID: A long value corresponding to Attribute.ParentID
            - ClassifierID: A long value corresponding to Attribute.ClassifierID. </param>
            <returns>Return True to enable addition of the new attribute to the model. Return False to disable addition of the new attribute.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreNewMethod(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreNewMethod notifies Add-Ins that a new method is about to be created on an element. It enables Add-Ins to permit or deny creation of the new method.
            This event occurs when a user creates a new method on an element by either drag-dropping from the Project Browser, using the method Properties dialog, or using the in-place editor on the diagram. The notification is provided immediately before the method is created, so that the Add-In can disable addition of the method.
            Also look at EA_OnPostNewMethod.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the method to be created:
            - ReturnType: A string value corresponding to Method.ReturnType
            - Stereotype: A string value corresponding to Method.Stereotype
            - ParentID: A long value corresponding to Method.ParentID
            - ClassifierID: A long value corresponding to Method.ClassifierID. </param>
            <returns>Return True to enable addition of the new method to the model. Return False to disable addition of the new method.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreNewPackage(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreNewPackage notifies Add-Ins that a new package is about to be created in the model. It enables Add-Ins to permit or deny creation of the new package.
            This event occurs when a user drags a new package from the Toolbox or Resources window onto a diagram, or by selecting the New Package icon from the Project Browser. The notification is provided immediately before the package is created, so that the Add-In can disable addition of the package.
            Also look at EA_OnPostNewPackage.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the package to be created:
            Stereotype: A string value corresponding to Package.Stereotype
            ParentID: A long value corresponding to Package.ParentID
            DiagramID: A long value corresponding to the ID of the diagram to which the package is being added. </param>
            <returns>Return True to enable addition of the new package to the model. Return False to disable addition of the new package.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreNewGlossaryTerm(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreNewGlossaryTerm notifies Add-Ins that a new glossary term is about to be created. It enables Add-Ins to permit or deny creation of the new glossary term.
            The notification is provided immediately before the glossary term is created, so that the Add-In can disable addition of the element.
            Also look at EA_OnPostNewGlossaryTerm.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the glossary term to be deleted:
            TermID: A long value corresponding to Term.TermID.</param>
            <returns>Return True to enable addition of the new glossary term to the model. Return False to disable addition of the new glossary term.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreExitInstance(EA.Repository)">
            <summary>
            EA_OnPreExitInstance is not currently used.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostNewElement(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostNewElement notifies Add-Ins that a new element has been created on a diagram. It enables Add-Ins to modify the element upon creation.
            This event occurs after a user has dragged a new element from the Toolbox or Resources window onto a diagram. The notification is provided immediately after the element is added to the model. Set Repository.SuppressEADialogs to true to suppress Enterprise Architect from showing its default dialogs.
            Also look at EA_OnPreNewElement.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the new element:
            - ElementID: A long value corresponding to Element.ElementID. </param>
            <returns>Return True if the element has been updated during this notification. Return False otherwise.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostNewConnector(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostNewConnector notifies Add-Ins that a new connector has been created on a diagram. It enables Add-Ins to modify the connector upon creation.
            This event occurs after a user has dragged a new connector from the Toolbox or Resources window onto a diagram. The notification is provided immediately after the connector is added to the model. Set Repository.SuppressEADialogs to true to suppress Enterprise Architect from showing its default dialogs.
            Also look at EA_OnPreNewConnector.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the new connector:
            - ConnectorID: A long value corresponding to Connector.ConnectorID.
            </param>
            <returns>Return True if the connector has been updated during this notification. Return False otherwise.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostNewDiagram(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostNewDiagram notifies Add-Ins that a new diagram has been created. It enables Add-Ins to modify the diagram upon creation.
            Set Repository.SuppressEADialogs to true to suppress Enterprise Architect from showing its default dialogs.
            Also look at EA_OnPreNewDiagram.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the new diagram:
            - DiagramID: A long value corresponding to Diagram.DiagramID.</param>
            <returns>Return True if the diagram has been updated during this notification. Return False otherwise.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostNewDiagramObject(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostNewDiagramObject notifies Add-Ins that a new object has been created on a diagram. It enables Add-Ins to modify the object upon creation.
            This event occurs after a user has dragged a new object from the Project Browser or Resources window onto a diagram. The notification is provided immediately after the object is added to the diagram. Set Repository.SuppressEADialogs to true to suppress Enterprise Architect from showing its default dialogs.
            Also look at EA_OnPreNewDiagramObject.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the new element:
            - ObjectID: A long value corresponding to Object.ObjectID.</param>
            <returns>Return True if the element has been updated during this notification. Return False otherwise.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostNewAttribute(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostNewAttribute notifies Add-Ins that a new attribute has been created on a diagram. It enables Add-Ins to modify the attribute upon creation.
            This event occurs when a user creates a new attribute on an element by either drag-dropping from the Project Browser, using the Attributes Properties dialog, or using the in-place editor on the diagram. The notification is provided immediately after the attribute is created. Set Repository.SuppressEADialogs to true to suppress Enterprise Architect from showing its default dialogs.
            Also look at EA_OnPreNewAttribute.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the new attribute:
            - AttributeID: A long value corresponding to Attribute.AttributeID.</param>
            <returns>Return True if the attribute has been updated during this notification. Return False otherwise.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostNewMethod(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostNewMethod notifies Add-Ins that a new method has been created on a diagram. It enables Add-Ins to modify the method upon creation.
            This event occurs when a user creates a new method on an element by either drag-dropping from the Project Browser, using the method's Properties dialog, or using the in-place editor on the diagram. The notification is provided immediately after the method is created. Set Repository.SuppressEADialogs to true to suppress Enterprise Architect from showing its default dialogs.
            Also look at EA_OnPreNewMethod.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the new method:
            - MethodID: A long value corresponding to Method.MethodID.</param>
            <returns>Return True if the method has been updated during this notification. Return False otherwise.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostNewPackage(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostNewPackage notifies Add-Ins that a new package has been created on a diagram. It enables Add-Ins to modify the package upon creation.
            This event occurs when a user drags a new package from the Toolbox or Resources window onto a diagram, or by selecting the New Package icon from the Project Browser. Set Repository.SuppressEADialogs to true to suppress Enterprise Architect from showing its default dialogs.
            Also look at EA_OnPreNewPackage.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the new package:
            - PackageID: A long value corresponding to Package.PackageID.</param>
            <returns>Return True if the package has been updated during this notification. Return False otherwise.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostNewGlossaryTerm(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostNewGlossaryTerm notifies Add-Ins that a new glossary term has been created. It enables Add-Ins to modify the glossary term upon creation.
            The notification is provided immediately after the glossary term is added to the model. Set Repository.SuppressEADialogs to true to suppress Enterprise Architect from showing its default dialogs.
            Also look at EA_OnPreNewGlossaryTerm.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the glossary term to be deleted:
            TermID: A long value corresponding to Term.TermID.</param>
            <returns>Return True if the glossary term has been updated during this notification. Return False otherwise.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostInitialized(EA.Repository)">
            <summary>
            EA_OnPostInitialized notifies Add-Ins that the Repository object has finished loading and any necessary initialization steps can now be performed on the object.
            For example, the Add-In can create an Output tab using Repository.CreateOutputTab.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostTransform(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostTransform notifies Add-Ins that an MDG transformation has taken place with the output in the specified target package.
            This event occurs when a user runs an MDG transform on one or more target packages. The notification is provided for each transform/target package immediately after all transform processes have completed.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty objects for the transform performed:
            - Transform: A string value corresponding to the name of the transform used
            - PackageID: A long value corresponding to Package.PackageID of the destination package. </param>
            <returns>Reserved for future use.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnInitializeTechnologies(EA.Repository)">
            <summary>
            EA_OnInitializeTechnologies requests that an Add-In pass an MDG Technology to Enterprise Architect for loading.
            This event occurs on Enterprise Architect startup. Return your technology XML to this function and Enterprise Architect loads and enables it.
            </summary>
            <example>
            public object EA_OnInitializeTechnologies(EA.Repository Repository){
            	return My.Resources.MyTechnology;}
            </example>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <returns>Return the MDG Technology as a single XML string.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPreActivateTechnology(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPreActivateTechnology notifies Add-Ins that an MDG Technology resource is about to be activated in the model. This event occurs when a user selects to activate an MDG Technology resource in the model (by clicking on the Set Active button on the MDG Technologies dialog or by selecting the technology in the list box in the Default Tools toolbar).
            The notification is provided immediately after the user attempts to activate the MDG Technology, so that the Add-In can permit or disable activation of the Technology.
            Also look at EA_OnPostActivateTechnology.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the MDG Technology to be activated:
            - TechnologyID: A string value corresponding to the MDG Technology ID.</param>
            <returns>Return True to enable activation of the MDG Technology resource in the model. Return False to disable activation of the MDG Technology resource.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnPostActivateTechnology(EA.Repository,EA.EventProperties)">
            <summary>
            EA_OnPostActivateTechnology notifies Add-Ins that an MDG Technology resource has been activated in the model. This event occurs when a user activates an MDG Technology resource in the model (by clicking on the Set Active button on the MDG Technologies dialog or by selecting the technology in the list box in the Default Tools toolbar). The notification is provided immediately after the user succeeds in activating the MDG Technology, so that the Add-In can update the Technology if necessary.
            Also look at EA_OnPreActivateTechnology.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Info">Contains the following EventProperty object for the MDG Technology to be activated:
            - TechnologyID: A string value corresponding to the MDG Technology ID.</param>
            <returns>Return True if the MDG Technology resource is updated during this notification. Return False otherwise.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnContextItemChanged(EA.Repository,System.String,EA.ObjectType)">
            <summary>
            EA_OnContextItemChanged notifies Add-Ins that a different item is now in context.
            This event occurs after a user has selected an item anywhere in the Enterprise Architect GUI. Add-Ins that require knowledge of the current item in context can subscribe to this broadcast function. If ot = otRepository, then this function behaves the same as EA_FileOpen.
            Also look at EA_OnContextItemDoubleClicked and EA_OnNotifyContextItemModified.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="GUID">Contains the GUID of the new context item. 
            This value corresponds to the following properties, depending on the value of the ot parameter:
            ot (ObjectType)	- GUID value
            otElement  		- Element.ElementGUID
            otPackage 		- Package.PackageGUID
            otDiagram		- Diagram.DiagramGUID
            otAttribute		- Attribute.AttributeGUID
            otMethod		- Method.MethodGUID
            otConnector		- Connector.ConnectorGUID
            otRepository	- NOT APPLICABLE, GUID is an empty string
            </param>
            <param name="ot">Specifies the type of the new context item.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnContextItemDoubleClicked(EA.Repository,System.String,EA.ObjectType)">
            <summary>
            EA_OnContextItemDoubleClicked notifies Add-Ins that the user has double-clicked the item currently in context.
            This event occurs when a user has double-clicked (or pressed [Enter]) on the item in context, either in a diagram or in the Project Browser. Add-Ins to handle events can subscribe to this broadcast function.
            Also look at EA_OnContextItemChanged and EA_OnNotifyContextItemModified.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="GUID">Contains the GUID of the new context item. 
            This value corresponds to the following properties, depending on the value of the ot parameter:
            ot (ObjectType)	- GUID value
            otElement  		- Element.ElementGUID
            otPackage 		- Package.PackageGUID
            otDiagram		- Diagram.DiagramGUID
            otAttribute		- Attribute.AttributeGUID
            otMethod		- Method.MethodGUID
            otConnector		- Connector.ConnectorGUID
            </param>
            <param name="ot">Specifies the type of the new context item.</param>
            <returns>Return True to notify Enterprise Architect that the double-click event has been handled by an Add-In. Return False to enable Enterprise Architect to continue processing the event.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnNotifyContextItemModified(EA.Repository,System.String,EA.ObjectType)">
            <summary>
            EA_OnNotifyContextItemModified notifies Add-Ins that the current context item has been modified.
            This event occurs when a user has modified the context item. Add-Ins that require knowledge of when an item has been modified can subscribe to this broadcast function.
            Also look at EA_OnContextItemChanged and EA_OnContextItemDoubleClicked.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="GUID">Contains the GUID of the new context item. 
            This value corresponds to the following properties, depending on the value of the ot parameter:
            ot (ObjectType)	- GUID value
            otElement  		- Element.ElementGUID
            otPackage 		- Package.PackageGUID
            otDiagram		- Diagram.DiagramGUID
            otAttribute		- Attribute.AttributeGUID
            otMethod		- Method.MethodGUID
            otConnector		- Connector.ConnectorGUID
            </param>
            <param name="ot">Specifies the type of the new context item.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_QueryAvailableCompartments(EA.Repository)">
            <summary>
            This event occurs when Enterprise Architect's diagrams are refreshed. It is a request for the Add-In to provide a list of user-defined compartments. The EA_GetCompartmentData event then queries each object for the data to display in each user-defined compartment.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <returns>A String containing a comma-separated list of user-defined compartments.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_GetCompartmentData(EA.Repository,System.String,System.String,EA.ObjectType)">
            <summary>
            This event occurs when Enterprise Architect is instructed to redraw an element. It requests that the Add-In provide the data to populate the element's compartment.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="sCompartment">The name of the compartment for which data is being requested.</param>
            <param name="sGUID">The GUID of the element for which data is being requested.</param>
            <param name="oType">The type of the element for which data is being requested.</param>
            <returns>Variant containing a formatted string. See the example in the EA Help file to understand the format.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnInitializeUserRules(EA.Repository)">
            <summary>
            EA_OnInitializeUserRules is called on Enterprise Architect start-up and requests that the Add-In provide Enterprise Architect with a rule category and list of rule IDs for model validation.
            This function must be implemented by any Add-In that is to perform its own model validation. It must call Project.DefineRuleCategory once and Project.DefineRule for each rule; these functions are described in the Project Interface section.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnStartValidation(EA.Repository,System.Object)">
            <summary>
            EA_OnStartValidation notifies Add-Ins that a user has invoked the model validation command from Enterprise Architect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Args">Contains a (Variant) list of Rule Categories that are active for the current invocation of model validation.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnEndValidation(EA.Repository,System.Object)">
            <summary>
            EA_OnEndValidation notifies Add-Ins that model validation has completed. Use this event to arrange any clean-up operations arising from the validation.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="Args">Contains a (Variant) list of Rule Categories that were active for the invocation of model validation that has just completed.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnRunElementRule(EA.Repository,System.String,EA.Element)">
            <summary>
            This event is triggered once for each rule defined in EA_OnInitializeUserRules to be performed on each element in the selection being validated. If you don't want to perform the rule defined by RuleID on the given element, then simply return without performing any action. On performing any validation, if a validation error is found, use the Repository.ProjectInterface.PublishResult method to notify Enterprise Architect.
            Also look at EA_OnInitializeUserRules.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="RuleID">The ID that was passed into the Project.DefineRule command.</param>
            <param name="Element">The element to potentially perform validation on.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnRunPackageRule(EA.Repository,System.String,System.Int64)">
            <summary>
            This event is triggered once for each rule defined in EA_OnInitializeUserRules to be performed on each package in the selection being validated.
            If you don't want to perform the rule defined by RuleID on the given package, then simply return without performing any action. 
            On performing any validation, if a validation error is found, use the Repository.ProjectInterface.PublishResult method to notify Enterprise Architect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="RuleID">The ID that was passed into the Project.DefineRule command.</param>
            <param name="PackageID">The ID of the package to potentially perform validation on. Use the Repository.GetPackageByID method to retrieve the package object.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnRunDiagramRule(EA.Repository,System.String,System.Int64)">
            <summary>
            This event is triggered once for each rule defined in EA_OnInitializeUserRules to be performed on each diagram in the selection being validated.
            If you don't want to perform the rule defined by RuleID on the given diagram, then simply return without performing any action. 
            On performing any validation, if a validation error is found, use the Repository.ProjectInterface.PublishResult method to notify Enterprise Architect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="RuleID">The ID that was passed into the Project.DefineRule command.</param>
            <param name="DiagramID">The ID of the diagram to potentially perform validation on. Use the Repository.GetDiagramByID method to retrieve the diagram object.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnRunConnectorRule(EA.Repository,System.String,System.Int64)">
            <summary>
            This event is triggered once for each rule defined in EA_OnInitializeUserRules to be performed on each connector in the selection being validated.
            If you don't want to perform the rule defined by RuleID on the given connector, then simply return without performing any action. 
            On performing any validation, if a validation error is found, use the Repository.ProjectInterface.PublishResult method to notify Enterprise Architect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="RuleID">The ID that was passed into the Project.DefineRule command.</param>
            <param name="ConnectorID">The ID of the connector to potentially perform validation on. Use the Repository.GetConnectorByID method to retrieve the connector object.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnRunAttributeRule(EA.Repository,System.String,System.String,System.Int64)">
            <summary>
            This event is triggered once for each rule defined in EA_OnInitializeUserRules to be performed on each attribute in the selection being validated.
            If you don't want to perform the rule defined by RuleID on the given attribute, then simply return without performing any action. 
            On performing any validation, if a validation error is found, use the Repository.ProjectInterface.PublishResult method to notify Enterprise Architect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="RuleID">The ID that was passed into the Project.DefineRule command.</param>
            <param name="AttributeGUID">The GUID of the attribute to potentially perform validation on. Use the Repository.GetAttributeByGUID method to retrieve the attribute object.</param>
            <param name="ObjectID">The ID of the object that owns the given attribute. Use the Repository.GetObjectByID method to retrieve the object.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnRunMethodRule(EA.Repository,System.String,System.String,System.Int64)">
            <summary>
            This event is triggered once for each rule defined in EA_OnInitializeUserRules to be performed on each method in the selection being validated.
            If you don't want to perform the rule defined by RuleID on the given method, then simply return without performing any action. 
            On performing any validation, if a validation error is found, use the Repository.ProjectInterface.PublishResult method to notify Enterprise Architect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="RuleID">The ID that was passed into the Project.DefineRule command.</param>
            <param name="MethodGUID">The GUID of the method to potentially perform validation on. Use the Repository.GetMethodByGUID method to retrieve the method object.</param>
            <param name="ObjectID">The ID of the object that owns the given method. Use the Repository.GetObjectByID method to retrieve the object.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnRunParameterRule(EA.Repository,System.String,System.String,System.String,System.Int64)">
            <summary>
            This event is triggered once for each rule defined in EA_OnInitializeUserRules to be performed on each parameter in the selection being validated.
            If you don't want to perform the rule defined by RuleID on the given parameter, then simply return without performing any action. 
            On performing any validation, if a validation error is found, use the Repository.ProjectInterface.PublishResult parameter to notify Enterprise Architect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="RuleID">The ID that was passed into the Project.DefineRule command.</param>
            <param name="ParameterGUID">The GUID of the parameter to potentially perform validation on. Use the Repository.GetParameterByGUID parameter to retrieve the parameter object.</param>
            <param name="MethodGUID">The GUID of the method that owns the given parameter. Use the Repository.GetMethodByGuid method to retrieve the method object.</param> 
            <param name="ObjectID">The ID of the object that owns the given parameter. Use the Repository.GetObjectByID parameter to retrieve the object.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnAttributeTagEdit(EA.Repository,System.Int64,System.String@,System.String@,System.String@)">
            <summary>
            EA_OnAttributeTagEdit is called when the user clicks the ellipsis ( ... ) button 
            for a Tagged Value of type AddinBroadcast on an attribute.
            The Add-In displays fields to show and change the value and notes; this function 
            provides the initial values for the Tagged Value notes and value, and takes on any 
            changes on exit of the function.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open 
            Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="AttributeID">The ID of the attribute that this Tagged Value is on</param>
            <param name="TagName">The name of the Tagged Value to edit.</param>
            <param name="TagValue">The current value of the tag; if the value is updated, 
            the new value is stored in the repository on exit of the function.</param>
            <param name="TagNotes">The current value of the Tagged Value notes; if the value 
            is updated, the new value is stored in the repository on exit of the function.</param>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:EAAddinFramework.EAAddinBase.EA_OnConnectorTagEdit(EA.Repository,System.Int64,System.String@,System.String@,System.String@)" ignoriert -->
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:EAAddinFramework.EAAddinBase.EA_OnElementTagEdit(EA.Repository,System.Int64,System.String@,System.String@,System.String@)" ignoriert -->
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:EAAddinFramework.EAAddinBase.EA_OnMethodTagEdit(EA.Repository,System.Int64,System.String@,System.String@,System.String@)" ignoriert -->
        <member name="M:EAAddinFramework.EAAddinBase.EA_OnRetrieveModelTemplate(EA.Repository,System.String)">
            <summary>
            EA_OnRetrieveModelTemplate requests that an Add-In pass a model template to Enterprise Architect.
            This event occurs when a user executes the Add a New Model Using Wizard command to add a model that has been defined by an MDG Technology. See the Incorporate Model Templates topic for details of how to define such model templates.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="sLocation">The name of the template requested. This should match the location attribute in the [ModelTemplates] section of an MDG Technology File. For more information, see the Incorporate Model Templates in a Technology topic.</param>	
            <returns>Return a string containing the XMI export of the model that is being used as a template.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_BuildProject(EA.Repository,System.String)">
            <summary>
            MDG_BuildProject enables the Add-In to handle file changes caused by generation. This function is called in response to a user selecting the Add-Ins | Build Project menu option.
            Respond to this event by compiling the project source files into a running application.
            Also look at MDG_RunExe.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_Connect(EA.Repository,System.Int64,System.String)">
            <summary>
            MDG_Connect enables the Add-In to handle user driven request to connect a model branch to an external application. This function is called when the user attempts to connect a particular Enterprise Architect package to an as yet unspecified external project. This event enables the Add-In to interact with the user to specify such a project.
            The Add-In is responsible for retaining the connection details, which should be stored on a per-user or per-workstation basis. That is, users who share a common Enterprise Architect model over a network should be able to connect and disconnect to external projects independently of one another.
            The Add-In should therefore not store connection details in an Enterprise Architect repository. A suitable place to store such details would be:
            SHGetFolderPath(..CSIDL_APPDATA..)\AddinName.
            The PackageGuid parameter is the same identifier as required for most events relating to the MDG Add-In. Therefore it is recommended that the connection details be indexed using the PackageGuid value.
            The PackageID parameter is provided to aid fast retrieval of package details from Enterprise Architect, should this be required.
            Also look at MDG_Disconnect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageID">The PackageID of the Enterprise Architect package the user has requested to have connected to an external project.</param>
            <param name="PackageGuid">The unique ID identifying the project provided by the Add-In when a connection to a project branch of an Enterprise Architect model was first established.</param>
            <returns>Returns a non-zero to indicate that a connection has been made; a zero indicates that the user has not nominated a project and connection should not proceed.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_Disconnect(EA.Repository,System.String)">
            <summary>
            MDG_Disconnect enables the Add-In to respond to user requests to disconnect the model branch from an external project. This function is called when the user attempts to disconnect an associated external project. The Add-In is required to delete the details of the connection.
            Also look at MDG_Connect.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <returns>Returns a non-zero to indicate that a disconnection has occurred enabling Enterprise Architect to update the user interface. A zero indicates that the user has not disconnected from an external project.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_GetConnectedPackages(EA.Repository)">
            <summary>
            MDG_GetConnectedPackages enables the Add-In to return a list of current connection between Enterprise Architect and an external application. This function is called when the Add-In is first loaded, and is expected to return a list of the available connections to external projects for this Add-In.
            Also look at MDG_Connect
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <returns>Returns an array of GUID strings representing individual Enterprise Architect packages.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_GetProperty(EA.Repository,System.String,System.String)">
            <summary>
            MDG_GetProperty provides miscellaneous Add-In details to Enterprise Architect. This function is called by Enterprise Architect to poll the Add-In for information relating to the PropertyName. This event should occur in as short a duration as possible as Enterprise Architect does not cache the information provided by the function.
            Values corresponding to the following PropertyNames must be provided:
            - IconID - Return the name of a DLL and a resource identifier in the format #ResID, where the resource ID indicates an Icon; for example, c:\program files\myapp\myapp.dlll#101
            - Language - Return the default language that Classes should be assigned when they are created in Enterprise Architect
            - HiddenMenus - Return one or more values from the MDGMenus enumeration to hide menus that do not apply to your Add-In. For example:
            if( PropertyName == "HiddenMenus" )
            return mgBuildProject + mgRun;
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <param name="PropertyName">The name of the property that is used by Enterprise Architect. See Details for the possible values.</param>
            <returns>see summary above</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_Merge(EA.Repository,System.String,System.Object@,System.String@,System.Object@,System.Object@,System.Object@,System.String@,System.String@)">
            <summary>
            MDG_Merge enables the Add-In to jointly handle changes to both the model branch and the code project that the model branch is connected to. This event should be called whenever the user has asked to merge their model branch with its connected code project, or whenever the user has established a new connection to a code project. The purpose of this event is to enable the Add-In to interact with the user to perform a merge between the model branch and the connected project.
            Also look at MDG_Connect, MDG_PreMerge and MDG_PostMerge.
            Merge
            A merge consists of three major operations:
            - Export: Where newly created model objects are exported into code and made available to the code project.
            - Import: Where newly created code objects, Classes and such things are imported into the model.
            - Synchronize: Where objects available both to the model and in code are jointly updated to reflect changes made in either the model, code project or both.
            - Synchronize Type
            The Synchronize operation can take place in one of four different ways. Each of these ways corresponds to a value returned by SynchType:
            - None: (SynchType = 0) No synchronization is to be performed
            - Forward: (SynchType = 1) Forward synchronization, between the model branch and the code project is to occur
            - Reverse: (SynchType = 2) Reverse synchronization, between the code project and the model branch is to occur
            - Both: (SynchType = 3) Reverse, then Forward synchronization's are to occur.
            Object ID Format
            Each of the Object IDs listed in the string arrays described above should be composed in the following format:
            (@namespace)*(#class)*($attribute|%operation|:property)*
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <param name="SynchObjects">A string array containing a list of objects (Object ID format) to be jointly synchronized between the model branch and the project. 
            See summary for the format of the Object IDs.</param>
            <param name="SynchType">The value determining the user-selected type of synchronization to take place. 
            See summary for a list of valid values.</param>
            <param name="ExportObjects">The string array containing the list of new model objects (in Object ID format) to be exported by Enterprise Architect to the code project.</param>
            <param name="ExportFiles">A string array containing the list of files for each model object chosen for export by the Add-In. 
            Each entry in this array must have a corresponding entry in the ExportObjects parameter at the same array index, 
            so ExportFiles(2) must contain the filename of the object by ExportObjects(2).</param>
            <param name="ImportFiles">A string array containing the list of code files made available to the code project to be newly imported to the model. 
            Enterprise Architect imports each file listed in this array for import into the connected model branch.</param>
            <param name="IgnoreLocked">A value indicating whether to ignore any files locked by the code project (that is, "TRUE" or "FALSE".</param>
            <param name="Language">The string value containing the name of the code language supported by the code project connected to the model branch.</param>
            <returns>Return a non-zero if the merge operation completed successfully and a zero value when the operation has been unsuccessful.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_NewClass(EA.Repository,System.String,System.String,System.String@)">
            <summary>
            MDG_NewClass enables the Add-In to alter details of a Class before it is created.
            This method is called when Enterprise Architect generates a new Class, and requires information relating to assigning the language and file path. The file path should be passed back as a return value and the language should be passed back via the language parameter.
            Also look at MDG_PreGenerate
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <param name="CodeID">A string used to identify the code element before it is created, for more information see MDG_View.</param>
            <param name="Language">A string used to identify the programming language for the new Class. The language must be supported by Enterprise Architect.</param>
            <returns>Returns a string containing the file path that should be assigned to the Class.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_PostGenerate(EA.Repository,System.String,System.String,System.String)">
            <summary>
            MDG_PostGenerate enables the Add-In to handle file changes caused by generation.
            This event is called after Enterprise Architect has prepared text to replace the existing contents of a file. Responding to this event enables the Add-In to write to the linked application's user interface rather than modify the file directly.
            When the contents of a file are changed, Enterprise Architect passes FileContents as a non-empty string. New files created as a result of code generation are also sent through this mechanism, enabling Add-Ins to add new files to the linked project's file list.
            When new files are created Enterprise Architect passes FileContents as an empty string. When a non-zero is returned by this function, the Add-In has successfully written the contents of the file. A zero value for the return indicates to Enterprise Architect that the file must be saved.
            Also look at MDG_PreGenerate.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <param name="FilePath">The path of the file Enterprise Architect intends to overwrite.</param>
            <param name="FileContents">A string containing the proposed contents of the file.</param>
            <returns>Return value depends on the type of event that this function is responding to (see summary). 
            This function is required to handle two separate and distinct cases.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_PostMerge(EA.Repository,System.String)">
            <summary>
            MDG_PostMerge is called after a merge process has been completed.
            This function is called by Enterprise Architect after the merge process has been completed.
            Note:
            File save checking should not be performed with this function, but should be handled by MDG_PreGenerate, MDG_PostGenerate and MDG_PreReverse.
            Also look at MDG_PreMerge and MDG_Merge.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <returns>Return a zero value if the post-merge process has failed, a non-zero return indicates that the post-merge has been successful. Enterprise Architect assumes a non-zero return if this method is not implemented</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_PreGenerate(EA.Repository,System.String)">
            <summary>
            MDG_PreGenerate enables the Add-In to deal with unsaved changes. 
            This function is called immediately before Enterprise Architect attempts to generate files from the model. 
            A possible use of this function would be to prompt the user to save unsaved source files.
            Also look at MDG_PostGenerate.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <returns>Return a zero value to abort generation. Any other value enables the generation to continue.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_PreMerge(EA.Repository,System.String)">
            <summary>
            MDG_PreMerge is called after a merge process has been initiated by the user and before Enterprise Architect performs the merge process.
            This event is called after a user has performed their interactions with the merge screen and has confirmed the merge with the OK button, but before Enterprise Architect performs the merge process using the data provided by the MDG_Merge call, before any changes have been made to the model or the connected project.
            This event is made available to provide the Add-In with the opportunity to generally set internal Add-In flags to augment the MDG_PreGenerate, MDG_PostGenerate and MDG_PreReverse events.
            Note:
            File save checking should not be performed with this function, but should be handled by MDG_PreGenerate, MDG_PostGenerate and MDG_PreReverse.
            Also look at MDG_Merge and MDG_PostMerge.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <returns>A return value of zero indicates that the merge process will not occur. If the value is not zero the merge process will proceed. If this method is not implemented then it is assumed that a merge process is used.</returns>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_PreReverse(EA.Repository,System.String,System.Object)">
            <summary>
            MDG_PreReverse enables the Add-In to save file changes before being imported into Enterprise Architect.
            This function operates on a list of files that are about to be reverse-engineered into Enterprise Architect. If the user is working on unsaved versions of these files in an editor, you could either prompt the user or save automatically.
            Also look at MDG_PostGenerate and MDG_PreGenerate.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <param name="FilePaths">A string array of filepaths pointed to the files that are to be reverse engineered.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_RunExe(EA.Repository,System.String)">
            <summary>
            MDG_RunExe enables the Add-In to run the target application. This function is called when the user selects the Add-Ins | Run Exe menu option. Respond to this event by launching the compiled application.
            Also look at MDG_BuildProject.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
        </member>
        <member name="M:EAAddinFramework.EAAddinBase.MDG_View(EA.Repository,System.String,System.String)">
            <summary>
            MDG_View enables the Add-In to display user specified code elements. This function is called by Enterprise Architect when the user asks to view a particular code element. This enables the Add-In to present that element in its own way, usually in a code editor.
            </summary>
            <param name="Repository">An EA.Repository object representing the currently open Enterprise Architect model.
            Poll its members to retrieve model data and user interface status information.</param>
            <param name="PackageGuid">The GUID identifying the Enterprise Architect package sub-tree that is controlled by the Add-In.</param>
            <param name="CodeID">Identifies the code element in the following format:
            [type]ElementPart[type]ElementPart...
            where each element is proceeded with a token identifying its type:
            @ -namespace
            # - Class
            $ - attribute
            % - operation
            For example if a user has selected the m_Name attribute of Class1 located in namespace Name1, the class ID would be passed through in the following format:
            @Name1#Class1%m_Name</param>
            <returns>Return a non-zero value to indicate that the Add-In has processed the request. Returning a zero value results in Enterprise Architect employing the standard viewing process which is to launch the associated source file.</returns>
        </member>
        <member name="P:EAAddinFramework.EAAddinBase.menuHeader">
            <summary>
            the name of the menu. 
            Set this name in the constructor of the derived add-in class
            </summary>
        </member>
        <member name="P:EAAddinFramework.EAAddinBase.menuOptions">
            <summary>
            the different options of the menu.
            Set these options in the constructor of the derived add-in class
            </summary>
        </member>
        <member name="T:EAAddinFramework.EASpecific.User">
            <summary>
            Description of User.
            </summary>
        </member>
        <member name="M:EAAddinFramework.EASpecific.User.#ctor(TSF.UmlToolingFramework.Wrappers.EA.Model,System.String,System.String,System.String)">
            <summary>
            creates a new user based on the given details
            </summary>
            <param name="model">the model containing the user</param>
            <param name="login">the string used to log in into the tool</param>
            <param name="firstName">the first name of the user</param>
            <param name="lastName">the last name of the user</param>
        </member>
        <member name="T:EAAddinFramework.EASpecific.WorkingSet">
            <summary>
            Description of WorkingSet.
            </summary>
        </member>
        <member name="M:EAAddinFramework.EASpecific.WorkingSet.copyToUser(EAAddinFramework.EASpecific.User,System.Boolean)">
            <summary>
            copy the workingset tot the given user
            </summary>
            <param name="user">the user to copy the working set to</param>
            <param name="overwrite">if true then the first workingset found with the same name
            for the given user will be overwritten</param>
        </member>
        <member name="M:EAAddinFramework.EASpecific.WorkingSet.delete">
            <summary>
            deletes the workingset from the database
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.Action">
            <summary>
            Description of Action.
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Element.getOwner``1">
            returns the owner of the given type
            This operation will keep on looking upwards through the owners until 
            it finds one with the given type.
            NON UML
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Element.getRelationships``1">
            default implementation returns an empty list because there is only one
            subclass that can actually implement this operation: EAElementWrapper.
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Element.select">
            <summary>
            selects the element. 
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Element.open">
            <summary>
            opens the element. 
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Element.getReferencingTaggedValues">
            <summary>
            default empty implementation
            </summary>
            <returns>empty set</returns>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Element.relationships">
            default implementation returns an empty list because there is only one
            subclass that can actually implement this operation: ElementWrapper.
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Element.taggedValues">
            <summary>
            default empty implementation
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.getRelationships``1">
            returns the Relationships with the given type T
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.Equals(System.Object)">
            two elementwrappers represent the same object 
            if their ea.guid are the same
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.GetHashCode">
            return the hashcode based on the elements guid
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.addOwnedElement``1(System.String)">
            creates a new element of the given type as an owned element of this 
            element
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.getUsingAttributes">
            <summary>
            returns the attributes that use this Element as type
            </summary>
            <returns>the attributes that use this Element as type</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.getDependentTypedElements``1">
            <summary>
            gets the TypedElements of the given type that use this element as type
            </summary>
            <returns>the TypedElements that use this element as type</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.getUsingParameters">
            <summary>
            returns the parameters having use this Element as type
            </summary>
            <returns>the parameters that use this element as type</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.getOperationsWithMeAsReturntype">
            <summary>
            returns the operations that have this element as return type
            </summary>
            <returns>the operations that have this element as return type</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.getItemFromRelativePath(System.Collections.Generic.List{System.String})">
            <summary>
            gets the item from the given relative path.
            </summary>
            <param name="relativePath">the "." separated path</param>
            <returns>the item with the given path</returns>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.isAbstract">
            indicates whether this element is abstract.
            In the EA API this is stored as a string with the values "0" or "1"
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.visibility">
            the visibility indicates the scope of the element
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.ownedAttributes">
            returns the attributes owned by this class
            This seems to be a subset of the classifiers attributes property, but 
            is is unclear what exactly the difference is.
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.id">
            represents the internal EA's elementID
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.superClasses">
            EA provides a shortcut tot the superclasses through its 
            element.BaseClasses
            Normally we would get those via the element.generalizations.general
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.generalizations">
            the generalisations (inheritance relations) of this element
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.ownedOperations">
            the operations owned by this element
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.clientDependencies">
            from Dependencies.Named Element.
            contains the dependencies that have this element as client
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ElementWrapper.supplierDependencies">
            from Dependencies.Named Element.
            contains the dependencies that have this element as supplier
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Action.context">
            <summary>
            The classifier that owns the behavior of which this action is a part.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Action.input">
            <summary>
            The ordered set of input pins connected to the Action. These are among the total set of inputs. {Specializes
            Element::ownedElement}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Action.output">
             <summary>
            The ordered set of output pins connected to the Action. The action places its results onto pins in this set.
            {Specializes Element::ownedElement}
             </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.Activity">
            <summary>
            Description of Activity.
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Activity.#ctor(TSF.UmlToolingFramework.Wrappers.EA.Model,EA.Element)">
            <summary>
            default constructor, calls parent constructor
            </summary>
            <param name="model">the model containing the element</param>
            <param name="wrappedElement">the EA.Element to be wrapped</param>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ConnectorWrapper.owner">
            <summary>
            not fully correct, but we will return the element at the source of the relation
            TODO: fix this so it uses the actual ownership as prescribed by UML
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ConnectorWrapper.stereotypes">
            the stereotypes defined on this Relationship
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ConnectorWrapper.relatedElements">
            returns the related elements.
            In EA the Connectoris a binary relationship. So only two Elements will 
            ever be returned.
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.ConnectorWrapper.memberEnds">
            Each end represents participation of instances of the classifier 
            connected to the end in links of the association. This is
            an ordered association. Subsets Namespace::member.
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.AssociationEnd.isStatic">
            isStatic is not supported by AssociationEnd in EA
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.AssociationEnd.type">
            The type of an associationend is stored in the EA.Association class
            itself in the fields ClientID and SupplierID
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Attribute.isStatic">
            the isStatic property defines context of the attribute.
            If true then the context is the class
            If false then the context is the instance.
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Event">
            <summary>
            Description of Event.
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.FinalState">
            <summary>
            Description of FinalState.
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State">
            <summary>
            Description of State.
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Vertex">
            <summary>
            Description of Vertex.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Vertex.outgoings">
            <summary>
            Specifies the transitions departing from this vertex. Derived in the following way:
            context Vertex::outgoing derive:
            Transition.allInstances() -> select(t | t.source = self)
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Vertex.incomings">
            <summary>
            Specifies the transitions entering this vertex. Derived in the following way:
            context Vertex::incoming derive:
            Transition.allInstances() -> select(t | t.target = self)
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Vertex.container">
            <summary>
            The region that contains this vertex. {Subsets Element::owner}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.isComposite">
            <summary>
            A state with isComposite=true is said to be a composite state. A composite state is a state that contains at least one
            region. Default value is false.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.isOrthogonal">
            <summary>
            A state with isOrthogonal=true is said to be an orthogonal composite state. An orthogonal composite state contains
            two or more regions. Default value is false.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.isSimple">
            <summary>
            A state with isSimple=true is said to be a simple state. A simple state does not have any regions and it does not refer
            to any submachine state machine. Default value is true.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.isSubmachineState">
            <summary>
            A state with isSubmachineState=true is said to be a submachine state. Such a state refers to a state machine
            (submachine). Default value is false.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.connections">
            <summary>
            The entry and exit connection points used in conjunction with this (submachine) state, i.e., as targets and sources,
            respectively, in the region with the submachine state. A connection point reference references the corresponding
            definition of a connection point pseudostate in the statemachine referenced by the submachinestate. {Subsets
            Namespace::ownedMember}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.connectionPoints">
            <summary>
            The entry and exit pseudostates of a composite state. These can only be entry or exit Pseudostates, and they must have
            different names. They can only be defined for composite states. {Subsets Namespace::ownedMember}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.deferrableTriggers">
            <summary>
            A list of triggers that are candidates to be retained by the state machine if they trigger no transitions out of the state (not
            consumed). A deferred trigger is retained until the state machine reaches a state configuration where it is no longer
            deferred.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.doActvity">
            <summary>
            An optional behavior that is executed while being in the state. The execution starts when this state is entered, and stops
            either by itself or when the state is exited whichever comes first. {Subsets Element::ownedElement}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.entry">
            <summary>
            An optional behavior that is executed whenever this state is entered regardless of the transition taken to reach the state. If
            defined, entry actions are always executed to completion prior to any internal behavior or transitions performed within the
            state. {Subsets Element::ownedElement}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.exit">
            <summary>
            An optional behavior that is executed whenever this state is exited regardless of which transition was taken out of the
            state. If defined, exit actions are always executed to completion only after all internal activities and transition actions have
            completed execution. {Subsets Element::ownedElement}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.redefinedState">
            <summary>
            The state of which this state is a redefinition. {Subsets RedefinableElement::redefinedElement}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.regions">
            <summary>
            The regions owned directly by the state.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.submachine">
            <summary>
            The state machine that is to be inserted in place of the (submachine) state.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.stateInvariant">
            <summary>
            Specifies conditions that are always true when this state is the current state. In protocol state machines, state invariants are
            additional conditions to the preconditions of the outgoing transitions, and to the postcondition of the incoming transitions.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.State.redefinitionContext">
            <summary>
            References the classifier in which context this element may be redefined. {Redefines
            RedefinableElement::redefinitionContext}
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.PseudoState">
            <summary>
            Description of PseudoState.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.PseudoState.kind">
            <summary>
            Determines the precise type of the Pseudostate. Default value is initial.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.PseudoState.statemachine">
            <summary>
            The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or
            exitPoint. {Subsets NamedElement::namespace}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.PseudoState.state">
            <summary>
            State that owns the Pseudostate. {Subsets Element::owner}
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Region">
            <summary>
            Description of Region.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Region.stateMachine">
            <summary>
            The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a
            State. {Subsets NamedElement::namespace}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Region.state">
            <summary>
            The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.
            {Subsets NamedElement::namespace}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Region.transitions">
            <summary>
            The set of transitions owned by the region. {Subsets Namespace::ownedMember}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Region.subvertices">
            <summary>
            The set of vertices that are owned by this region. {Subsets Namespace::ownedMember}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Region.extendedRegion">
            <summary>
            The region of which this region is an extension. {Subsets RedefinableElement::redefinedElement}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Region.redefinitionContext">
            <summary>
            References the classifier in which context this element may be redefined. {Redefines
            RedefinableElement::redefinitionContext}
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.StateMachine">
            <summary>
            Description of StateMachine.
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.StateMachine.#ctor(TSF.UmlToolingFramework.Wrappers.EA.Model,EA.Element)">
            <summary>
            default constructor, calls parent constructor
            </summary>
            <param name="model">the model containing the element</param>
            <param name="wrappedElement">the EA.Element to be wrapped</param>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition">
            <summary>
            Description of Transition.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition.kind">
            <summary>
            See definition of TransitionKind. Default value is external.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition.triggers">
            <summary>
            Specifies the triggers that may fire the transition.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition.guard">
            <summary>
            A guard is a constraint that provides a fine-grained control over the firing of the transition. The guard is evaluated
            when an event occurrence is dispatched by the state machine. If the guard is true at that time, the transition may be
            enabled; otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with
            side effects are ill-formed. {Subsets Namespace::ownedRule}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition.effect">
            <summary>
            Specifies an optional behavior to be performed when the transition fires.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition.source">
            <summary>
            Designates the originating vertex (state or pseudostate) of the transition.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition.target">
            <summary>
            Designates the target vertex that is reached when the transition is taken.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition.redefinedTransition">
            <summary>
            The transition of which this is a replacement. {Subsets RedefinableElement::redefinedElement}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition.redefinitionContext">
            <summary>
            References the classifier in which context this element may be redefined. {Redefines
            RedefinableElement::redefinitionContext}
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Transition.container">
            <summary>
            Designates the region that owns this transition. (Subsets Namespace.namespace)
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.BehaviorStateMachines.Trigger">
            <summary>
            Description of Transition.
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.CallOperationAction">
            <summary>
            CallOperationAction is an action that transmits an operation call request to the target object, where it may cause the
            invocation of associated behavior. The argument values of the action are available to the execution of the invoked
            behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the
            invoked behavior completes and a reply transmission is returned to the caller; otherwise, execution of the action is
            complete when the invocation of the operation is established and the execution of the invoked operation proceeds
            concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on
            the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation
            action is complete.
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.CallOperationAction.#ctor(TSF.UmlToolingFramework.Wrappers.EA.Model,EA.Element)">
            <summary>
            constructor, no special treatment
            </summary>
            <param name="model">the model</param>
            <param name="wrappedElement">the EA.Element to wrap</param>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.CallOperationAction.operation">
            <summary>
            The operation to be invoked by the action execution.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.CallOperationAction.target">
            <summary>
            The target object to which the request is sent. The classifier of the target object is used to dynamically determine a
            behavior to invoke. This object constitutes the context of the execution of the operation. {Subsets Action::input} 
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.CallOperationAction.isSynchronous">
            <summary>
            If true, the call is synchronous and the caller waits for completion of the invoked behavior. If false, the call is
            asynchronous and the caller proceeds immediately and does not expect a return value.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.CallOperationAction.result">
            <summary>
            A list of output pins where the results of performing the invocation are placed. {Subsets Action::input} 
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.CallOperationAction.arguments">
            <summary>
            Specification of the ordered set of argument values that appear during execution. 
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Diagram.getDiagramLinkForRelation(TSF.UmlToolingFramework.Wrappers.EA.ConnectorWrapper)">
            find the diagramlink object (if any) that represents the given 
            relation
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Diagram.getRelations">
            <summary>
            the relations on a diagram in EA are sometimes expressed as 
            DiagramLink but not always.
            We are looking for all relations that have both their ends displayed 
            on the diagram.
            To make this a bit faster the list of id's is retrieved using an sql 
            query
            </summary>
            <returns>all reations ont he diagram</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Diagram.getItemFromRelativePath(System.Collections.Generic.List{System.String})">
            <summary>
            searches downward for the item with the given relative path
            This relative path includes the own name
            </summary>
            <param name="relativePath">list of names inlcuding the own name</param>
            <returns>the item matching the path</returns>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Diagram.diagramElements">
            all elements shown on this diagram.
            Currently only diagramObjectWrappers and relations
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.DiagramLinkWrapper">
            A diagramElement that wraps the EA.DiagramLink class.
            This is the representation of a Relationship on a diagram.
            For some strange reason EA doesn't create a DiagramLink for each 
            relation shown on the diagram.
            Only the relations that have their visualisation altered on the diagram 
            have a DiagramLink object.
            (this was in version 7.5.850, it might change in version 8.0)
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.DiagramLinkWrapper.isHidden">
            In EA relations can be hidden from a diagram. They still have a 
            DiagramLink object, but it is set to hidden.
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.getInstance(TSF.UmlToolingFramework.Wrappers.EA.Model)">
            returns the singleton instance for the given model.
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.getInstance">
            returns the singleton instance for a new model
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createElement(System.Object)">
            creates a new UML element based on the given object to wrap
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createParameter(EA.Parameter)">
            returns a new EAParameter based on the given EA.Parameter
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createOperation(EA.Method)">
            returns a new EAOperatation wrapping the given EA.Method
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createEAConnectorWrapper(EA.Connector)">
            creates a new EAConnectorWrapper wrapping the given EA.Connector
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createEAAttribute(EA.Attribute)">
            creates a new EAAttribute based on the given EA.Attribute
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createEAElementWrapper(EA.Element)">
            creates a new EAElementWrapper based on the given EA.Element
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createPrimitiveType(System.Object)">
            creates a new primitive type based on the given typename
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createEAParameterReturnType(TSF.UmlToolingFramework.Wrappers.EA.Operation)">
            creates a new EAParameterReturnType based on the given operation
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createStereotype(TSF.UmlToolingFramework.UML.Classes.Kernel.Element,System.String)">
            returns a new stereotype based on the given name and attached to the 
            given element
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createStereotypes(TSF.UmlToolingFramework.UML.Classes.Kernel.Element,System.String)">
            creates a set of stereotypes based on the comma seperated names string
            and attaches it to the given element
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.createNewElement``1(TSF.UmlToolingFramework.UML.Classes.Kernel.Element,System.String)">
            create a new element as owned element of the given owner
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Factory.translateTypeName(System.String)">
            translates the UML type name to the EA equivalent
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.Interaction">
            <summary>
            Description of InterAction.
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Interaction.#ctor(TSF.UmlToolingFramework.Wrappers.EA.Model,EA.Element)">
            <summary>
            default constructor, calls parent constructor
            </summary>
            <param name="model">the model containing the element</param>
            <param name="wrappedElement">the EA.Element to be wrapped</param>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Model.#ctor">
            Creates a model connecting to the first running instance of EA
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Model.#ctor(EA.Repository)">
            constructor creates EAModel based on the given repository
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Model.getElementWrapperByID(System.Int32)">
            Finds the EA.Element with the given id and returns an EAElementwrapper 
            wrapping this element.
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Model.getElementWrapperByGUID(System.String)">
            <summary>
            Finds the EA.Element with the given GUID and returns an EAElementwrapper 
            wrapping this element.
            </summary>
            <param name="GUID">the GUID of the element</param>
            <returns>the element with the given GUID</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Model.getElementWrappersByQuery(System.String)">
            <summary>
            returns the elementwrappers that are identified by the Object_ID's returned by the given query
            </summary>
            <param name="sqlQuery">query returning the Object_ID's</param>
            <returns>elementwrappers returned by the query</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Model.getAttributeByGUID(System.String)">
            <summary>
            gets the Attribute with the given GUID
            </summary>
            <param name="GUID">the attribute's GUID</param>
            <returns>the Attribute with the given GUID</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Model.getAttributeByID(System.Int32)">
            <summary>
            gets the Attribute with the given ID
            </summary>
            <param name="attributID">the attribute's ID</param>
            <returns>the Attribute with the given ID</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Model.getParameterByGUID(System.String)">
            <summary>
            gets the parameter by its GUID.
            This is a tricky one since EA doesn't provide a getParameterByGUID operation
            we have to first get the operation, then loop the pamarameters to find the one
            with the GUID
            </summary>
            <param name="GUID">the parameter's GUID</param>
            <returns>the Parameter with the given GUID</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Model.SQLQuery(System.String)">
            generic query operation on the model.
            Returns results in an xml format
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Model.selectedElement">
            the Element currently selected in EA
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Model.factory">
            returns the correct type of factory for this model
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Model.users">
            <summary>
            all users defined in this model
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Model.currentUser">
            <summary>
            Contains the currently logged in user.
            Returns null is security not enabled.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Model.workingSets">
            <summary>
            The working sets defined in this model
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Model.isSecurityEnabled">
            <summary>
            returns true if security is enabled in this model
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.NoteComment">
            A comment is a textual annotation that can be attached to a set of 
            elements. This class wraps notes that can be made visible on a diagram.
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.NoteComment.body">
            Specifies a string that is the comment.
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.NoteComment.annotatedElements">
            References the Element(s) being commented.
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.Operation">
            The EAoperation wraps the EA.Method and is both an operation from Kernel 
            as an Operation from Interfaces
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Operation.getDependentCallOperationActions">
            <summary>
            returns all CallOperationActions that call this operation
            </summary>
            <returns>all CallOperationActions that call this operation</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.Operation.getUsingDiagrams``1">
            <summary>
            returns all diagrams that somehow use this operation
            </summary>
            <returns>all diagrams that use this operation</returns>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Operation.methods">
            <summary>
            A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular
            pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).
            </summary>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.Package">
            <summary>
            Description of Package.
            </summary>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Package.ownedElements">
            <summary>
            
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.ParameterWrapper.saveElement">
            saves the parameter to the case tool.
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.RootPackage">
            <summary>
            Description of rootPackage.
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.RootPackage.GetHashCode">
            <summary>
            return the hashcode based on the elements guid
            </summary>
            <returns>hashcode based on the elements guid</returns>
        </member>
        <member name="T:TSF.UmlToolingFramework.Wrappers.EA.SequenceDiagram">
            <summary>
            Description of SequenceDiagram.
            </summary>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.SequenceDiagram.getCalledOperations">
            <summary>
            returns all operations called in this sequence diagram
            </summary>
            <returns>all operations called in this sequence diagram</returns>
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.SequenceDiagram.getRelations">
            <summary>
            gets all relations that are specific to this sequence diagram.
            </summary>
            <returns>all messages and other relations of the diagram</returns>
        </member>
        <member name="P:TSF.UmlToolingFramework.Wrappers.EA.Stereotype.owningNamespace">
            if the owning element is a namespace then this is returned.
            If not then the owning namespace of the owner is returned
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.VisibilityKind.getEAVisibility(TSF.UmlToolingFramework.UML.Classes.Kernel.VisibilityKind)">
            translates the UML VisibilityKind to the string used in EA
        </member>
        <member name="M:TSF.UmlToolingFramework.Wrappers.EA.VisibilityKind.getUMLVisibilityKind(System.String,TSF.UmlToolingFramework.UML.Classes.Kernel.VisibilityKind)">
            translates the EA visibilityString to the UML VisibilityKind.
            If the proper translation cannot be found the defaultVisibility will 
            be returned
        </member>
        <member name="T:EAAddinFramework.Utilities.EventPropertiesHelper">
            <summary>
            Description of EventPropertiesHelper.
            </summary>
        </member>
        <member name="T:EAAddinFramework.Utilities.ConnectorType">
            <summary>
            The connector types available for Enterprise Architect transformation IL.
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Aggregation">
            <summary>
            Aggregation
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Assembly">
            <summary>
            Assembly
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Association">
            <summary>
            Association
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Collaboration">
            <summary>
            Collaboration
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.ControlFlow">
            <summary>
            ControlFlow
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Connector">
            <summary>
            Connector
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Delegate">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Dependency">
            <summary>
            Dependency
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Deployment">
            <summary>
            Deployment
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.ForeignKey">
            <summary>
            ForeignKey
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Generalization">
            <summary>
            Generalization
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.InformationFlow">
            <summary>
            InformationFlow
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Instantiation">
            <summary>
            Instantiation
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Interface">
            <summary>
            Interface
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.InterruptFlow">
            <summary>
            InterruptFlow
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Manifest">
            <summary>
            Manifest
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Nesting">
            <summary>
            Nesting
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.NoteLink">
            <summary>
            NoteLink
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.ObjectFlow">
            <summary>
            ObjectFlow
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Package">
            <summary>
            Package
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Realization">
            <summary>
            Realization
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Transition">
            <summary>
            Transition
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.UseCase">
            <summary>
            UseCase
            </summary>
        </member>
        <member name="F:EAAddinFramework.Utilities.ConnectorType.Uses">
            <summary>
            Uses
            </summary>
        </member>
        <member name="T:EAAddinFramework.Utilities.TransformationILWriter">
            <summary>
            The TransformationILWriter to write common EA transformation intermediate language elements to any underlying 
            System.IO.TextWriter. In fact it implements kind of a little DSL for Enterprise Architects transformation language.
            </summary>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            Creates a new TransformationILWTextWriter instance.
            </summary>
            <param name="writer">The System.IO.TextWriter to use for output.</param>
            <param name="initialIndent">The initial indent level.</param>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.Indent(System.Int32)">
            <summary>
            Increases the current indent level.
            </summary>
            <param name="increment">The number of indent levels to insert.</param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.OpenILInterface">
            <summary>
            Opens an IL 'Interface' declaration at the current indent level and increases the indent level.
            <code>
            Interface
            {
            </code>
            </summary>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.OpenILClass">
            <summary>
            Opens an IL 'Class' declaration at the current indent level and increases the indent level.
            <code>
            Class
            {
            </code>
            </summary>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.OpenILPackage">
            <summary>
            Opens an IL 'Package' declaration at the current indent level and increases the indent level.
            <code>
            Package
            {
            </code>
            </summary>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.OpenILXRef">
            <summary>
            Opens an IL 'XRef' declaration at the current indent level and increases the indent level.
            <code>
            XRef
            {
            </code>
            </summary>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.OpenILConnector(EAAddinFramework.Utilities.ConnectorType)">
            <summary>
            Opens an IL connector of type connectorType declaration at the current indent level and increases the indent level.
            <code>
            [connectorType]
            {
            </code>
            </summary>
            <param name="connectorType">The IL connector type to declare</param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.OpenILConnectorRaw(System.String)">
            <summary>
            Opens an IL connector of type connectorType declaration at the current indent level and increases the indent level.
            <code>
            [connectorType]
            {
            </code>
            </summary>
            <param name="connectorType">The IL connector type to declare</param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.OpenILOperation">
            <summary>
            Opens an IL 'Operation' declaration at the current indent level and increases the indent level.
            <code>
            Operation
            {
            </code>
            </summary>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.OpenILParameter">
            <summary>
            Opens an IL 'Parameter' declaration at the current indent level and increases the indent level.
            <code>
            Parameter
            {
            </code>
            </summary>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.OpenILAttribute">
            <summary>
            Opens an IL 'Attribute' declaration at the current indent level and increases the indent level.
            <code>
            Attribute
            {
            </code>
            </summary>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.CloseIL">
            <summary>
            Decreases the indent level and closes the actual IL declaration scope.
            </summary>
            <code>
            }
            </code>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILTag(System.String,System.String)">
            <summary>
            Writes an IL tagged value declaration at the current indent level.
            <code>
            Tag
            {
                name = "[tagName]"
                value = "[tagValue]"
            }
            </code>
            </summary>
            <param name="tagName">The tagged value name.</param>
            <param name="tagValue">The tagged values value.</param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteStdPackageProperties(TSF.UmlToolingFramework.UML.Classes.Kernel.Package)">
            <summary>
            Writes the IL declarations for a packages standard properties.
            </summary>
            <param name="package">The UML model package instance that declares the properties to generate.</param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteStdConnectorProperties(TSF.UmlToolingFramework.UML.StateMachines.BehaviorStateMachines.Transition)">
            <summary>
            Writes the IL declarations for a UML model transitions standard properties.
            </summary>
            <param name="relationship"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILConnectorSource(TSF.UmlToolingFramework.Wrappers.EA.ConnectorWrapper,System.Collections.Specialized.StringDictionary)">
            <summary>
            Writes a connector source at the current indent level.
            </summary>
            <param name="connectorWrapper"></param>
            <param name="addProperties"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILConnectorSource(System.String,TSF.UmlToolingFramework.UML.Classes.Kernel.Element,System.Collections.Specialized.StringDictionary)">
            <summary>
            Writes a relationships connector source from using an UML model element.
            </summary>
            <param name="type"></param>
            <param name="sourceRef"></param>
            <param name="addProperties"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILConnectorTarget(TSF.UmlToolingFramework.Wrappers.EA.ConnectorWrapper,System.Collections.Specialized.StringDictionary)">
            <summary>
            Writes a transitions connector source at the current indent level.
            </summary>
            <param name="connectorWrapper"></param>
            <param name="addProperties"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILConnectorTarget(System.String,TSF.UmlToolingFramework.UML.Classes.Kernel.Element,System.Collections.Specialized.StringDictionary)">
            <summary>
            Writes a relationships connector target from using an UML model element.
            </summary>
            <param name="type"></param>
            <param name="targetRef"></param>
            <param name="addProperties"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILProperty(System.String,System.String)">
            <summary>
            Writes an IL property declaration at the current indentation level.
            </summary>
            <code>
            [propertyName] = "[propertyValue]"
            </code>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILStereotype(System.String)">
            <summary>
            Writes an IL 'Stereotype' declaration at the current indentation level.
            </summary>
            <code>
            Stereotype = "[propertyValue]"
            </code>
            <param name="stereotype"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILComment(System.String)">
            <summary>
            Writes an IL comment.
            </summary>
            <param name="comment"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
            <remarks>
            The Enterprise Architect transformation IL doesn't seem to support comments that will
            be ignored on transformations. So this method does actually nothing.
            </remarks>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILComment(System.String,System.Object[])">
            <summary>
            Writes an IL comment from a fomat specification.
            </summary>
            <param name="comment"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
            <remarks>
            The Enterprise Architect transformation IL doesn't seem to support comments that will
            be ignored on transformations. So this method does actually nothing.
            </remarks>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILError(System.String)">
            <summary>
            Writes an error message to the current transformation IL output. This will stop the transformation at this point
            and can be inspected in a saved transformation IL file.
            </summary>
            <param name="error"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.WriteILError(System.String,System.Object[])">
            <summary>
            Writes a formatted error message to the current transformation IL output. This will stop the transformation at this point
            and can be inspected in a saved transformation IL file.
            </summary>
            <param name="error"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.GenerateXRef(TSF.UmlToolingFramework.UML.Classes.Kernel.Element)">
            <summary>
            Writes an IL 'XRef' declaration for element at the current indentation level.
            </summary>
            <param name="name"></param>
            <param name="elementWrapper"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.GenerateXRef(System.String,TSF.UmlToolingFramework.UML.Classes.Kernel.Element)">
            <summary>
            Writes an IL 'XRef' declaration for element at the current indentation level.
            </summary>
            <param name="name"></param>
            <param name="elementWrapper"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.GenerateXRef(System.String,System.String)">
            <summary>
            Writes an IL 'XRef' declaration for refName and sourceGuid at the current indentation level.
            </summary>
            <param name="refName"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.GenerateXRef(System.String,TSF.UmlToolingFramework.Wrappers.EA.ConnectorWrapper)">
            <summary>
            Writes an IL 'XRef' declaration for connectorWrapper at the current indentation level.
            </summary>
            <param name="name"></param>
            <param name="connectorWrapper"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
        <member name="M:EAAddinFramework.Utilities.TransformationILWriter.GenerateClassProperties(TSF.UmlToolingFramework.UML.UMLItem)">
            <summary>
            Writes the standard IL 'Class' properties at the current indentation level.
            </summary>
            <param name="umlItem"></param>
            <returns>The TransformationILWriter instance for use in concatenated output.</returns>
        </member>
    </members>
</doc>
